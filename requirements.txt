# requirements.txt - list all the packages the project needs
#
# In this file, ignore hashes (#) - they are just used to create comments.
# Lines starting with a hash are ignored when installing packages using this file. 

# ======================================================
# IMPORTANT: The contents of this file varies by project 
# ======================================================

# Some common dependencies are provided in this example.
# Comment them in or out as you need them.

# ======================================================
# STEP A - CREATE A LOCAL PROJECT VIRTUAL ENV (.venv)
# ======================================================

# This option uses the most current or default Python -
# if an older version is required, use the ADVANCED OPTION below. 

# Create your local project virtual environment
# This step ensures you have an isolated Python environment for your project.
# This is typically just done once at the beginning of a project.
# If it gets messed up, we can delete .venv and recreate it at any time. 

# Run the following command to create a virtual environment in the project root.
### On Windows, Use PowerShell (not cmd) - don't include the #:
# py -m venv .venv

### On Mac/Linux, Use zsh or bash (or PowerShell) - don't include the #:
# python3 -m venv .venv

### If VS Code asks: We noticed a new environment has been created. 
# Do you want to select it for the workspace folder?
# Click Yes. 

# ======================================================
# STEP B - ALWAYS ACTIVATE THE (.venv) WHEN OPENING A NEW TERMINAL
# ======================================================

# ALWAYS activate the .venv before working on the project.
# Activate whenever you open a new terminal. 

### Windows PowerShell Command (don't include the #):
# .\.venv\Scripts\activate

### Mac/Linux/WSL Command (don't include the #):
# source .venv/bin/activate

# Verify: When active, you can usually see (.venv) in the terminal.

# If using a Jupyter notebook, select the kernel associated with your project (.venv).

# ======================================================
# STEP C - INSTALL PACKAGES INTO (.venv) AS NEEDED
# ======================================================

# Install necessary packages listed below with this command:
# Keep packages updated with the most recent versions.

# When you identify a new package you want to use, 
# Just update the list below and re-run this command. 

### Windows Command (don't include the #):
# py -m pip install --upgrade pip 
# py -m pip install --upgrade -r requirements.txt 

### Mac/Linux/WSL Command (don't include the #):
# python3 -m pip install --upgrade pip
# python3 -m pip install --upgrade -r requirements.txt 

# When you identify a new package you want to use, 
# Just update the list below and re-run the install command. 

# ======================================================
# STEP D: VS CODE - Select Interpreter 
# ======================================================
# VS Code needs our populated .venv to interpret our files correctly.
# To set the VS Code Interpreter:
# 1. Open the Command Palette: Press Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (Mac).
# 2. Search for "Python: Select Interpreter":
# 3. Type Python: Select Interpreter in the Command Palette search bar and select it from the dropdown.
# 4. Choose an Interpreter - A list of available Python environments will appear.
#    Look for the local .venv option.
# 5. Once selected, check the Python version displayed 
#    in the bottom-left corner of the VS Code window in the status bar.

# ======================================================
# COMMON STANDARD LIBRARY MODULES (NO INSTALL REQUIRED)
# ======================================================
# These modules are built into Python and do NOT need to be installed.
# They are available automatically when using Python.

# DO NOT UNCOMMENT THESE - THEY ARE ALREADY INCLUDED.

# json       - For handling JSON data
# csv        - For reading/writing CSV files
# sqlite3    - For working with SQLite databases (built into Python)
# pathlib    - For working with filesystem paths
# os         - For interacting with the OS (e.g., file paths, env vars)
# sys        - For system-specific parameters and functions
# urllib      - For basic URL handling and data fetching (useful with or without requests)

# math        - For mathematical functions (sqrt, log, etc.)
# statistics  - For statistical analysis (mean, median, stdev, etc.)
# random      - For generating random numbers
# time        - For time-based functions
# datetime    - For date and time manipulation

# logging     - For structured logging in Python
# re          - For regular expressions and pattern matching
# pprint      - For pretty-printing complex or nested data structures
# collections - For specialized containers like Counter, defaultdict
# typing      - For type hints and static type checking
# unittest    - For writing and running unit tests

# ======================================================
# ESSENTIAL EXTERNAL TOOLS - UNCOMMENT ONLY WHAT THE PROJECT NEEDS
# ======================================================
# Uncomment needed packages below and add more as required for the project.

# Work with Markdown files
markdown

# ======================================================
# TEXT-TO-SPEECH
# ======================================================
# Offline text-to-speech library for Python (1-15 MB)
pyttsx3  
